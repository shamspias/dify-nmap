import logging
from collections.abc import Generator
from typing import Any
import json

from dify_plugin import Tool
from dify_plugin.entities.tool import ToolInvokeMessage
from pydantic import BaseModel, Field

logger = logging.getLogger(__name__)


class VulnerabilityScannerParameters(BaseModel):
    """
    Parameters for vulnerability scanning
    """
    target: str = Field(
        ...,
        description="Target host or network to scan"
    )

    scan_level: str = Field(
        "safe",
        description="Scan level: safe, default, intrusive, aggressive"
    )

    vulnerability_types: str = Field(
        "common",
        description="Types: common, web, database, network, all"
    )

    port_range: str = Field(
        "common",
        description="Ports: common, top100, top1000, all"
    )

    check_cves: bool = Field(
        True,
        description="Check for known CVEs"
    )

    check_default_creds: bool = Field(
        True,
        description="Check for default credentials"
    )

    check_ssl_issues: bool = Field(
        True,
        description="Check for SSL/TLS vulnerabilities"
    )


class VulnerabilityScannerTool(Tool):
    """
    Tool for scanning vulnerabilities using NSE scripts
    """

    def _invoke(
            self, tool_parameters: dict[str, Any]
    ) -> Generator[ToolInvokeMessage, None, None]:
        """
        Perform vulnerability scanning
        """
        try:
            params = VulnerabilityScannerParameters(**tool_parameters)

            # Import python-nmap
            try:
                import nmap
            except ImportError:
                yield self.create_text_message(
                    "‚ùå Error: python-nmap library not installed"
                )
                return

            nm = nmap.PortScanner()

            yield self.create_text_message(
                f"üîç Starting vulnerability scan...\n"
                f"Target: {params.target}\n"
                f"Scan Level: {params.scan_level}\n"
                f"Focus: {params.vulnerability_types}\n"
            )

            # Build scan arguments
            args = ["-sV"]  # Always do service detection for vuln scanning

            # Port selection
            if params.port_range == "common":
                args.append("-p 21,22,23,25,53,80,110,143,443,445,3306,3389,8080")
            elif params.port_range == "top100":
                args.append("--top-ports 100")
            elif params.port_range == "top1000":
                args.append("--top-ports 1000")
            elif params.port_range == "all":
                args.append("-p-")

            # Build script list based on parameters
            scripts = []

            # Base vulnerability scripts by level
            if params.scan_level == "safe":
                scripts.append("safe")
                args.append("-T2")  # Polite timing
            elif params.scan_level == "default":
                scripts.append("default")
                scripts.append("safe")
                args.append("-T3")
            elif params.scan_level == "intrusive":
                scripts.append("default")
                scripts.append("safe")
                scripts.append("intrusive")
                args.append("-T4")
            elif params.scan_level == "aggressive":
                scripts.append("default")
                scripts.append("safe")
                scripts.append("intrusive")
                scripts.append("vuln")
                args.append("-T4")

            # Add specific vulnerability checks
            if params.vulnerability_types in ["common", "all"]:
                scripts.extend([
                    "vuln",
                    "exploit",
                ])

            if params.vulnerability_types in ["web", "all"]:
                scripts.extend([
                    "http-vuln-*",
                    "http-sql-injection",
                    "http-xss",
                    "http-csrf",
                ])

            if params.vulnerability_types in ["database", "all"]:
                scripts.extend([
                    "mysql-vuln-*",
                    "ms-sql-*",
                    "mongodb-*",
                    "redis-info",
                ])

            if params.vulnerability_types in ["network", "all"]:
                scripts.extend([
                    "smb-vuln-*",
                    "ssl-*",
                    "ssh-*",
                    "ftp-vuln-*",
                ])

            # Specific checks
            if params.check_default_creds:
                scripts.extend([
                    "http-default-accounts",
                    "ssh-brute",
                    "ftp-brute",
                    "mysql-brute",
                ])

            if params.check_ssl_issues:
                scripts.extend([
                    "ssl-cert",
                    "ssl-enum-ciphers",
                    "ssl-heartbleed",
                    "ssl-poodle",
                    "sslv2",
                ])

            if params.check_cves:
                scripts.append("vulners")

            # Combine scripts
            if scripts:
                script_arg = ",".join(set(scripts))  # Remove duplicates
                args.append(f"--script={script_arg}")

            arguments = " ".join(args)

            # Execute scan
            try:
                scan_result = nm.scan(hosts=params.target, arguments=arguments)
            except Exception as e:
                yield self.create_text_message(f"‚ùå Scan error: {e}")
                return

            # Process results
            vulnerabilities = []
            total_vulns = 0
            critical_vulns = 0
            high_vulns = 0

            for host in nm.all_hosts():
                if nm[host].state() != "up":
                    continue

                host_vulns = {
                    "host": host,
                    "hostname": nm[host].hostname(),
                    "vulnerabilities": []
                }

                # Check port-based vulnerabilities
                for proto in nm[host].all_protocols():
                    for port in nm[host][proto].keys():
                        port_info = nm[host][proto][port]

                        if 'script' in port_info:
                            for script_name, script_output in port_info['script'].items():
                                if 'vuln' in script_name.lower() or 'exploit' in script_name.lower():
                                    vuln = {
                                        "port": port,
                                        "service": port_info.get('name', 'unknown'),
                                        "script": script_name,
                                        "details": script_output[:500]  # Limit output
                                    }

                                    # Categorize severity
                                    if 'critical' in script_output.lower():
                                        vuln['severity'] = 'CRITICAL'
                                        critical_vulns += 1
                                    elif 'high' in script_output.lower():
                                        vuln['severity'] = 'HIGH'
                                        high_vulns += 1
                                    else:
                                        vuln['severity'] = 'MEDIUM'

                                    host_vulns['vulnerabilities'].append(vuln)
                                    total_vulns += 1

                # Check host-level vulnerabilities
                if 'hostscript' in nm[host]:
                    for script in nm[host]['hostscript']:
                        if 'vuln' in script['id'].lower():
                            vuln = {
                                "port": "host",
                                "service": "host",
                                "script": script['id'],
                                "details": script['output'][:500]
                            }
                            host_vulns['vulnerabilities'].append(vuln)
                            total_vulns += 1

                if host_vulns['vulnerabilities']:
                    vulnerabilities.append(host_vulns)

            # Create output
            output = []
            output.append("=" * 60)
            output.append("VULNERABILITY SCAN RESULTS")
            output.append("=" * 60)
            output.append(f"Total Vulnerabilities Found: {total_vulns}")
            output.append(f"Critical: {critical_vulns}")
            output.append(f"High: {high_vulns}")
            output.append("")

            for host_data in vulnerabilities:
                output.append(f"\nHost: {host_data['host']}")
                if host_data['hostname']:
                    output.append(f"Hostname: {host_data['hostname']}")
                output.append(f"Vulnerabilities: {len(host_data['vulnerabilities'])}")
                output.append("-" * 40)

                for vuln in host_data['vulnerabilities']:
                    severity = vuln.get('severity', 'UNKNOWN')
                    output.append(f"[{severity}] Port {vuln['port']} ({vuln['service']})")
                    output.append(f"  Script: {vuln['script']}")
                    output.append(f"  Details: {vuln['details'][:200]}...")
                    output.append("")

            yield self.create_text_message("\n".join(output))

            # Send JSON summary
            summary = {
                "scan_level": params.scan_level,
                "total_vulnerabilities": total_vulns,
                "critical": critical_vulns,
                "high": high_vulns,
                "hosts_scanned": len(nm.all_hosts()),
                "vulnerable_hosts": len(vulnerabilities),
                "vulnerabilities": vulnerabilities
            }

            yield self.create_json_message(summary)

            # Risk assessment
            risk_level = "LOW"
            if critical_vulns > 0:
                risk_level = "CRITICAL"
            elif high_vulns > 0:
                risk_level = "HIGH"
            elif total_vulns > 5:
                risk_level = "MEDIUM"

            yield self.create_text_message(
                f"\n‚ö†Ô∏è **RISK ASSESSMENT: {risk_level}**\n"
                f"{'=' * 30}\n"
                f"Scan completed with {total_vulns} vulnerabilities found.\n"
                f"Immediate action required for {critical_vulns + high_vulns} high-priority issues."
            )

        except Exception as e:
            logger.error(f"Vulnerability scan error: {e}", exc_info=True)
            yield self.create_text_message(f"‚ùå Error: {e}")
